// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceHealthReader.Data;

#nullable disable

namespace ServiceHealthReader.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230314123305_AddPostsBackIn")]
    partial class AddPostsBackIn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.Graph.ServiceHealthIssue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("TEXT")
                        .HasColumnName("AdditionalData");

                    b.Property<int?>("Classification")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "classification");

                    b.Property<DateTimeOffset?>("EndDateTime")
                        .HasColumnType("datetimeoffset")
                        .HasAnnotation("Relational:JsonPropertyName", "endDateTime");

                    b.Property<string>("Feature")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "feature");

                    b.Property<string>("FeatureGroup")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "featureGroup");

                    b.Property<string>("ImpactDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "impactDescription");

                    b.Property<bool?>("IsResolved")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "isResolved");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("datetimeoffset")
                        .HasAnnotation("Relational:JsonPropertyName", "lastModifiedDateTime");

                    b.Property<string>("ODataType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "@odata.type");

                    b.Property<int?>("Origin")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "origin");

                    b.Property<string>("Service")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "service");

                    b.Property<DateTimeOffset?>("StartDateTime")
                        .HasColumnType("datetimeoffset")
                        .HasAnnotation("Relational:JsonPropertyName", "startDateTime");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.HasKey("Id");

                    b.ToTable("ServiceHealthIssues");
                });

            modelBuilder.Entity("Microsoft.Graph.ServiceHealthIssuePost", b =>
                {
                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetimeoffset")
                        .HasAnnotation("Relational:JsonPropertyName", "createdDateTime");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("TEXT")
                        .HasColumnName("AdditionalData");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("ODataType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "@odata.type");

                    b.Property<int?>("PostType")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "postType");

                    b.Property<string>("ServiceHealthIssueId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CreatedDateTime");

                    b.HasIndex("ServiceHealthIssueId");

                    b.ToTable("ServiceHealthIssuePost");

                    b.HasAnnotation("Relational:JsonPropertyName", "posts");
                });

            modelBuilder.Entity("ServiceHealthReader.Data.Models.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ServiceHealthIssueId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceHealthIssueId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("ServiceHealthReader.Data.Models.Serverinfo", b =>
                {
                    b.Property<int?>("ServerInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ServerInfoId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DataCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ring")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleInstance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScaleUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ServerInfoId");

                    b.HasIndex("TenantId");

                    b.ToTable("ServerInfos");
                });

            modelBuilder.Entity("ServiceHealthReader.Data.Models.Tenant", b =>
                {
                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TenantId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("ServiceHealthReader.Data.Models.TenantIssue", b =>
                {
                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FirstSeen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("IssueId", "TenantId");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantIssue");
                });

            modelBuilder.Entity("Microsoft.Graph.ServiceHealthIssuePost", b =>
                {
                    b.HasOne("Microsoft.Graph.ServiceHealthIssue", null)
                        .WithMany("Posts")
                        .HasForeignKey("ServiceHealthIssueId");
                });

            modelBuilder.Entity("ServiceHealthReader.Data.Models.Issue", b =>
                {
                    b.HasOne("Microsoft.Graph.ServiceHealthIssue", "ServiceHealthIssue")
                        .WithMany()
                        .HasForeignKey("ServiceHealthIssueId");

                    b.Navigation("ServiceHealthIssue");
                });

            modelBuilder.Entity("ServiceHealthReader.Data.Models.Serverinfo", b =>
                {
                    b.HasOne("ServiceHealthReader.Data.Models.Tenant", "Tenant")
                        .WithMany("ServerInfo")
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ServiceHealthReader.Data.Models.TenantIssue", b =>
                {
                    b.HasOne("ServiceHealthReader.Data.Models.Issue", "Issue")
                        .WithMany("TenantIssues")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceHealthReader.Data.Models.Tenant", "Tenant")
                        .WithMany("TenantIssues")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Microsoft.Graph.ServiceHealthIssue", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ServiceHealthReader.Data.Models.Issue", b =>
                {
                    b.Navigation("TenantIssues");
                });

            modelBuilder.Entity("ServiceHealthReader.Data.Models.Tenant", b =>
                {
                    b.Navigation("ServerInfo");

                    b.Navigation("TenantIssues");
                });
#pragma warning restore 612, 618
        }
    }
}
