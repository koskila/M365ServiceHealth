@page "/"

@using BlazorApp.Shared
@using Radzen;
@using ServiceHealthReader.Data.Models;
@using System.Text.Json;
@using System.Text.Json.Serialization;

@inject HttpClient Http

<PageTitle>M365 Issue History</PageTitle>

<RadzenText TextStyle="TextStyle.H1">M365 Issue History</RadzenText>

<RadzenText TextStyle="TextStyle.Body1">There's no caching whatsoever, so this is much slower than it'd need to be.</RadzenText>

@if (issues == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true"
                PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"
                Data="@issues.OrderByDescending(x => x.Id)" TItem="Issue" ColumnWidth="300px"
                LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Issue" Property="ServiceHealthIssue.Id" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Center">
                <Template Context="data">
                    <a href="/issue/@data.Id">@data.ServiceHealthIssue?.Id</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Issue" Property="ServiceHealthIssue.StartDateTime" Filterable="true" Title="Start Date" Frozen="true" Width="75px" TextAlign="TextAlign.Center">
                <Template Context="data">
                    <a href="/issue/@data.Id">@data.ServiceHealthIssue?.StartDateTime</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Issue" Property="ServiceHealthIssue.EndDateTime" Filterable="true" Title="End Date" Frozen="true" Width="75px" TextAlign="TextAlign.Center">
                <Template Context="data">
                    @data.ServiceHealthIssue?.EndDateTime
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Issue" Property="Status" Filterable="true" Title="Status" Frozen="true" Width="50px" TextAlign="TextAlign.JustifyAll">
                <Template Context="data">
                    @data.ServiceHealthIssue?.Status
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Issue" Filterable="false" Title="Number of posts" Frozen="true" Width="50px" TextAlign="TextAlign.Center" Sortable="false">
                <Template Context="data">
                    @data.ServiceHealthIssue?.Posts?.Count()
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Issue" Property="ServiceHealthIssue" Filterable="true" Title="Issue" Frozen="true" TextAlign="TextAlign.Left">
                <Template Context="data">
                    @data.ServiceHealthIssue?.ImpactDescription
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Issue" Property="Tenant" Title="Geographical impact" Frozen="true" Filterable="false" Sortable="false">
                <Template Context="data">
                    @{
                        List<string> geos = new List<string>();
                        foreach (var tenant in data.TenantIssues.Select(x => x.Tenant))
                        {
                            foreach (var dc in tenant.ServerInfo?.Select(x => x.DataCenter).Distinct())
                            {
                                geos.Add(dc);
                            }
                        }

                        <BlazorApp.Client.Components.Geolist Geos=geos AllGeos=AllGeos></BlazorApp.Client.Components.Geolist>
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    private IEnumerable<Issue> issues = new List<Issue>();
    private List<string> AllGeos = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        // Revert this stuff - the headers that you get from Graph API are always from the nearest DC, to get the data location you need to
        // call the damn Exchange APIs, which I'm NOT going to do, so the Geo data in db is actually all just West Europe.
        // Let's mock this instead.
        AllGeos.Add("West Europe");
        AllGeos.Add("East US");
        AllGeos.Add("West US");
        AllGeos.Add("North Europe");
        AllGeos.Add("Global");
        //try
        //{
        //    AllGeos = (await Http.GetFromJsonAsync<List<string>>("/api/AllGeos"));
        //}
        //catch (Exception ex)
        //{
        //    Console.WriteLine(ex.ToString());
        //    Console.Write(ex.StackTrace);
        //}

        try
        {
            var str = await Http.GetStringAsync("/api/Announcements");

            // parse str JSON into issues[] using System.Text.JSON
            issues = JsonSerializer.Deserialize<List<Issue>>(str, new JsonSerializerOptions()
                {
                    ReferenceHandler = ReferenceHandler.Preserve,
                })
                .OrderByDescending(x => x.ServiceHealthIssue.StartDateTime)
                ;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Console.Write(ex.StackTrace);
        }
    }
}