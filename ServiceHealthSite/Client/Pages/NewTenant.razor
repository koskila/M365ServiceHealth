@page "/newTenant"

@inject DialogService dg
@inject IJSRuntime jsRuntime
@inject NavigationManager nvm
@inject HttpClient Http

<PageTitle>Register New Tenant</PageTitle>

<RadzenCard Style="max-width: 640px;">
    <h1>Register New Tenant</h1>
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenRow>
            <RadzenTextBox Label="Tenant ID" @bind-Value="@tenantId" Placeholder="Tenant ID" />
            <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Click=CheckIfTenantExists Text="Validate" />
        </RadzenRow>

        <RadzenText TextStyle="TextStyle.Overline">Clicking "Authorize Tenant" will open a link to @url </RadzenText>
        <RadzenButton ButtonStyle="Radzen.ButtonStyle.Primary" Click=AuthorizeTenant Text="Authorize Tenant" />

        <RadzenText TextStyle="TextStyle.Overline">This will only work if tenant has been authorized</RadzenText>
        <RadzenButton ButtonStyle="Radzen.ButtonStyle.Primary" Click=TriggerIndex Text="Add Tenant" Disabled=!canAdd />
    </RadzenStack>
</RadzenCard>

@code {
    private string tenantId = "";
    private bool showDialog = false;
    private bool showTrigger = false;
    private bool canAdd = false;

    private string clientId = "ae386325-7a95-414b-ba02-d61603d983e5";
    private string redirectUri = "";
    private string url = "";
    //private string redirectUri = "https://white-grass-0d81f3a03.2.azurestaticapps.net/";

    protected override Task OnInitializedAsync()
    {
#if DEBUG
    canAdd = true;
#endif

        return base.OnInitializedAsync();
    }

    private async Task AddTenant()
    {

    }

    protected async Task CheckIfTenantExists()
    {
        var exists = await Http.GetFromJsonAsync<bool>($"/api/TenantExists/{tenantId}");

        if (exists)
        {
            showTrigger = true;
        }
        else
        {
            canAdd = true;
        }

        redirectUri = $"{nvm.BaseUri}tenant/";
        url = $"https://login.microsoftonline.com/{tenantId}/oauth2/authorize?client_id={clientId}&response_type=token&redirect_uri={redirectUri}&response_mode=query&scope=openid%20offline_access%20https%3A%2F%2Fgraph.microsoft.com%2F.default&state=12345&prompt=consent";


        this.StateHasChanged();
    }

    protected async Task TriggerIndex()
    {
        await Http.GetFromJsonAsync<bool>($"/api/Trigger/{tenantId}");
    }

    protected async Task AuthorizeTenant()
    {
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");

        showTrigger = true;
        this.StateHasChanged();
    }
}
