@page "/newTenant"

@inject DialogService dg
@inject IJSRuntime jsRuntime
@inject NavigationManager nvm
@inject HttpClient Http

<PageTitle>Register New Tenant</PageTitle>

<h1>Register New Tenant</h1>

<RadzenTextBox Label="Tenant ID" @bind-Value="@tenantId" Placeholder="Tenant ID" />
<RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Click=CheckIfTenantExists Text="Check if tenant exists" />
<RadzenButton ButtonStyle="Radzen.ButtonStyle.Primary" Click=AddTenant Text="Add Tenant" Disabled=!canAdd />
@if (canAdd)
{
    <RadzenText>Will open a link to @url </RadzenText>
}

@if (showTrigger)
{
    <RadzenButton Click=TriggerIndex></RadzenButton>
}

@code {
    private string tenantId = "";
    private bool showDialog = false;
    private bool showTrigger = false;
    private bool canAdd = false;

    private string clientId = "ae386325-7a95-414b-ba02-d61603d983e5";
    private string redirectUri = "";
    private string url = "";
    //private string redirectUri = "https://white-grass-0d81f3a03.2.azurestaticapps.net/";

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private async Task AddTenant()
    {
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    protected async Task CheckIfTenantExists()
    {
        var exists = await Http.GetFromJsonAsync<bool>($"/api/TenantExists/{tenantId}");

        if (exists)
        {
            showTrigger = true;
        }
        else
        {
            canAdd = true;
        }

        redirectUri = $"{nvm.BaseUri}tenant/";
        url = $"https://login.microsoftonline.com/{tenantId}/oauth2/authorize?client_id={clientId}&response_type=code&redirect_uri={redirectUri}&response_mode=query&scope=openid%20offline_access%20https%3A%2F%2Fgraph.microsoft.com%2F.default";
        

        this.StateHasChanged();
    }

    protected async Task TriggerIndex()
    {
        await Http.GetFromJsonAsync<bool>($"/api/Trigger/{tenantId}");
    }
}
